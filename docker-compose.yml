services:
  redis:
    image: redis:7
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 2s
      timeout: 1s
      retries: 10

  postgres:
    image: postgres:16
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - ./postgres.dev.env
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "superuser", "-d", "devdb"]
      interval: 2s
      timeout: 1s
      retries: 10

  rest_api:
    build:
      context: ./backend
      dockerfile: rest_api/Dockerfile
    depends_on:
      - redis
      - postgres
    env_file:
      - ./rest_api.dev.env
    volumes:
      - ./backend/rest_api:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  ws_gateway:
    build:
      context: ./backend
      dockerfile: ws_gateway/Dockerfile
    depends_on:
      - redis
      - postgres
    env_file:
      - ./ws_gateway.dev.env
    volumes:
      - ./backend/ws_gateway:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  event_consumer:
    build:
      context: ./backend
      dockerfile: event_consumer/Dockerfile
    depends_on:
      - redis
      - postgres
    env_file:
      - ./event_consumer.dev.env
    volumes:
      - ./backend/event_consumer:/app

  lease_manager:
    build:
      context: ./backend
      dockerfile: lease_manager/Dockerfile
    depends_on:
      - redis
      - postgres
    env_file:
      - ./lease_manager.dev.env
    volumes:
      - ./backend/lease_manager:/app

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true

  edge:
    image: caddy:2.8
    restart: unless-stopped
    depends_on:
      - rest_api
      - ws_gateway
      - frontend
    ports:
      - "8080:8080"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config

volumes:
  postgres_data:
  redis_data:
  caddy_data:
  caddy_config:
