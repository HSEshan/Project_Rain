name: project-rain

services:
  redis:
    image: redis:7
    restart: unless-stopped
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:16
    restart: unless-stopped
    environment:
      - POSTGRES_USER=superuser
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=proddb
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-U",
          "${POSTGRES_USER:-superuser}",
          "-d",
          "${POSTGRES_DB:-devdb}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  rest_api:
    build:
      context: ./backend
      dockerfile: rest_api/Dockerfile.prod
    image: project-rest_api:prod
    env_file:
      - ./backend/rest_api/production.env
    depends_on:
      - redis
      - postgres
    restart: unless-stopped

  ws_gateway:
    build:
      context: ./backend
      dockerfile: ws_gateway/Dockerfile.prod
    image: project-ws_gateway:prod
    env_file:
      - ./backend/ws_gateway/production.env
    depends_on:
      - redis
      - postgres
    restart: unless-stopped

  event_consumer:
    build:
      context: ./backend
      dockerfile: event_consumer/Dockerfile.prod
    image: project-event_consumer:prod
    env_file:
      - ./backend/event_consumer/production.env
    restart: unless-stopped
    depends_on:
      - redis
      - postgres

  lease_manager:
    build:
      context: ./backend
      dockerfile: lease_manager/Dockerfile.prod
    image: project-lease_manager:prod
    env_file:
      - ./backend/lease_manager/production.env
    restart: unless-stopped
    depends_on:
      - redis
      - postgres

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    image: project-frontend:prod
    restart: unless-stopped

  # edge nginx: PUBLIC ENTRYPOINT
  edge:
    image: nginx:1.25-alpine
    restart: unless-stopped
    depends_on:
      - rest_api
      - ws_gateway
      - frontend
    ports:
      - "80:80"
    volumes:
      - ./nginx/edge.conf:/etc/nginx/conf.d/default.conf:ro
    # (optional) if you want logs on host:
    # - ./nginx/logs:/var/log/nginx

volumes:
  postgres_data:
  redis_data:
