name: project-rain

services:
  redis:
    image: redis:7
    restart: unless-stopped
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:16
    restart: unless-stopped
    env_file:
      - ./postgres.env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test:
        ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  rest_api:
    image: ghcr.io/{GH_USERNAME}/{GH_REPO_NAME}/rest_api:prod
    env_file:
      - ./rest_api.env
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  ws_gateway:
    image: ghcr.io/{GH_USERNAME}/{GH_REPO_NAME}/ws_gateway:prod
    env_file:
      - ./ws_gateway.env
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  event_consumer:
    image: ghcr.io/{GH_USERNAME}/{GH_REPO_NAME}/event_consumer:prod
    env_file:
      - ./event_consumer.env
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
    restart: unless-stopped
    depends_on:
      - redis
      - postgres

  lease_manager:
    image: ghcr.io/{GH_USERNAME}/{GH_REPO_NAME}/lease_manager:prod
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
    restart: unless-stopped
    depends_on:
      - redis
      - postgres

  frontend:
    image: ghcr.io/{GH_USERNAME}/{GH_REPO_NAME}/frontend:prod
    restart: unless-stopped

  # edge caddy: PUBLIC ENTRYPOINT (TLS + reverse proxy)
  edge:
    image: caddy:2.8
    restart: unless-stopped
    depends_on:
      - rest_api
      - ws_gateway
      - frontend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config

volumes:
  postgres_data:
  redis_data:
  caddy_data:
  caddy_config:
